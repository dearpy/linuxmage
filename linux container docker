容器中运行程序要运行在前台
书  Using Docker
    Docker cookbook
    Docker in Action
程序文件 docker
    yum install docker
linux container  lxc openvz
    共用一个内核，虚拟用户空间
  kvm dom0 管理其他，zen 每一台主机都是独立的一台主机进行模拟，隔离性很好
  库级别虚拟化 wine  粒度更小
  应用程序的运行环境 jdk
容器及虚拟库 1 号进程 init systemd 与内核打交道的进程
  pstree
NameSpace:
    内核级别，环境 隔离

    PID NameSpace：虚拟出各种需要的PID    PID 隔离   看到的pid都一样但不干扰 linux 2.6.24
    Network NameSpace ：linux 2.6.19 网络设备、网络栈、端口等网络资源隔离
    User NameSpace：Linux 3.08  开始  10稳定
    IPC NameSpace：进程间通信 Linux 2.6.19 信号量、消息队列、共享内存的隔离
    UTS NameSpace Linux 2.6.19 主机名和域名的隔离
    Mount NameSpace: linux 2.4.19 挂载点（文件系统）的隔离

    API: clone()线程的系统调用 创建,setns()设定网络名称空间 网络站, unshare()做成非共享机制
CGroup:linux Control Group  Linux 2.6.24
    内核级别，限制，控制与一个进成组群的资源
        资源：CPU,内存，IO  动态分配
        功能：
                Resource limitation :资源限制
                Priortization：优先级控制
                Accounting：审计和统计，主要为收费
                Control：挂起进程，恢复进程
             /sys/fs/cgroup
                  单根树状结构组织的
            lssubsys -m epel源
            mount
            [root@agent1 wrk]# uname -r
            3.10.0-327.el7.x86_64
            [root@agent1 wrk]# cat /proc/version
            Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015
            [root@agent1 wrk]#

NameSpace + CGroup 实现容器的隔离的技术

        CGroup的子系统：
            bikio:设定块设备的I/O限制；
            cpu:设定cpu限制
            cpuacct:报告cgroup中所使用的CPU资源
            cpuset:为cgroup中的任务分配内存资源  分配内存及cpu
            memory:设置内存的使用的限制
            devices:控制cgroup中的任务对设备的访问:
            freezer:挂起进成和恢复某个cgroup的任务
            net_cls:classid 使用等级级别标识符来标记网络数据包，以实现基于tc完成对不同的cgroup中产生的流量控制
            perf_event 性能相关控制事件 使用后使cgroup正的任务可以进行统一的性能测试
            hugetlb:转换后援缓冲器 对hugeTLB限制；大内存页分配
                默认: 每4k 一个页框

                tc -h
            CGroups的术语：
                task（任务）：进程或线程 一个task只能属于一个cgroup
                cgroup:控制组 一个独立的资源控制单位，可以包含一个或多个子系统（）
                subsystem：子系统
                hierarchy：层级
AUFS:UnionFS 联合文件系统 docker 强依赖
    UnionFS:把不同的物理位置的目录合并到同一个目录中。不同文件系统的联合。事实是叠加，最上层是可写的
    mount -t aufs -o dirs=./test1:./test2 none ./union

Device mapper:为底层块设备提供抽象设备
    linux 2.6 内核引入的重要的技术之一，用于在内核中支持逻辑卷的通用设备的映射机制
    Mapped Device 被影射的设备
    Mapping Table 映射表 映射路径
    Target Device 原设备
docker 应用快速包装发布
    实现：把运行程序和所依赖的环境打包成单个文件
    单内核 需要端口映射
    容器启动被执行，关闭被释放。按需创建。容器使用云存储 存文件存在云存储中 容器上依赖卷实现数据持久化，
    核心概念：C-S 架构
        2013，GO，Appache 2.0 ，公司dotCloud
        aws 云支持docker
        C/S
            Docker Client 发起请求的 docker相关
            Docker Server 容器运行的节点
                容器 docker的一个实例
                镜像放在 docker hub 仓库 启动容器所需要的文件
                建账号 放自己的镜像
                创建私有仓库
                基础镜像 官方提供
        dockerfile：基于dockerfile创建镜像
docker container  docker 实例 运行一个containner 就运行一个实例

docker link ： docker与docker 通信
docker volume：实现存储的一种机制

docker search centos
docker images 镜像列表
docker-current pull busybox 拉取镜像到public repotory
    docker-current pull hub.magedu.com：5000/busybox
     docker ps 查看实例的信息
        855b546a0b21 和容器打交道通过id
    将修改保存，创建一个新镜像 commit
命令总结
    docker info
    docker version
    维护相关
        docker images
        inspect
        build  创建镜像
        commit  创建映像文件（打包最上层变化）
docker  pause/unpause
        ps
        rm  移除container 855b546a0b21（移除关闭的container）
        rmi
        run   基于映像文件运行容器 --rm 注
        start/stop/restart
        top
        kill 855b546a0b21
        ...
    日志相关
        events
        history
        logs
    Docker hub 服务相关
        login
        logout
        pull
        push
        search
基本操作：
    获取映像：pull
    启动容器：run
        -i 交互式， -t 虚拟终端

docker run -it centos:latest /bin/bash 展开用户启动空间

docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
        docker commit container_id centos:ip
        基于那个container创建一个镜像
       官方账号 docker login
            docker push
            docker pull
    dockerfile 创建镜像
# docker 架构

docker 应用
    镜像：包含了启动Docker 容器所需要的文件系统层级及其内容；其余UnionFS采用
        bootfs
    registry:用于保存镜像的元数据及镜像
        通过它下载镜像
        保存docker镜像及镜像层次结构和元数据
    reposlitory：基于http完成镜像存储的服务

    index
    graph


    docker run -it --name=nginx centos：latest /bin/sh
        实例的名字nginx 仓库centos tag：latest

    docker
        run
            --name
            -i --interactive=false
            -t --tty=false
            -net=default
            -d --detach=false 运行守护进程
            步骤：
               1 检查本地是否有指定的镜像，不存在则从registry下载
                利用镜像启动容器
                分配一个文件系统，并且在只读的镜像层之外挂载的一个可读写层；
                从宿主机配置的网桥接口中桥接一个虚拟接口
                从地址池中分配一个地址给容器
                执行用户指定的应用程序
                程序执行完成后，终止
            对于交互式模式启动的容器，终止可使用exit命令或ctrl+d
        log：获取日志及历史输出信息
            docker help log
docker attach nginx
        import 导入tar，做镜像
        export 导出到tar
docker registry
    yum instal docker-registry


  docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]

 私有仓库配置
   准备： /etc/sysconfig/docker
        ADD_REGISTRY='--add-registry 192.168.1.160:5000'
        INSECURE_REGISTRY='--insecure-registry 192.168.1.160:5000'
    关联至本地仓库
        1.docker tag 8dc35658c01b 192.168.1.160:5000/centos:1.1.1
            给要push到私有库的镜像打标签
        2.docker push 192.16仓8.1.160:5000/centos:1.1.1

        docker pull 172.168.1.160:5000/centos:1.1.1
    本地推送到docker hub 个人
        step1——找到本地镜像的ID：docker images

        step2——登陆Hub：docker login --username=username --password=password --email=email

        step3——tag：docker tag <imageID> <namespace>/<image name>:<version tag eg latest>

        step4——push镜像：docker push <namespace>/<image name>
        Docker的数据卷
    Data Volume  有宿主机共享给容器的一个目录。
        数据卷是提供一个或多个容器使用的文件或目录（多数为目录），有多种特性
            可以共享于多个容器之前
            对数据卷的修改会立即生效
            对数据卷的更新与镜像无关
            数据卷会一直存在
    使用数据卷的方式：
        （1） 创建容器时指明数据卷
                docker run -it --name= -v --volume=

                -v 挂载点
                    默认映射宿主机位置 /var/lib/docker/volumes/

                    -v /testdir/volume/nginx01:/data/test
                        冒号前：宿主机路径
                        冒号后：容器路径
                容器共享卷：
                     --volumes-from=container_name or id
                删除卷：
                    docker rm -v CONTAINER_NAME
                        删除容器的同时删除其卷；
                    docker rum -rm 选项，表示容器关闭时会被自动删除，同时删除卷（此容器最后一个使用此卷）
                卷备份和恢复：
                    备份：
                        docker run -rm --volumes-from vol_container_name -v $(pwd):/backup busybox:latest tar cvf /backup/data.tar /data
                    恢复：

Docker 网络:
    brctl show  netswitch
   桥 仅主机 net  jre隧道叠加网络
   支持的网络模式
        bridge 模式：
            --net=BRIDGE_NAME
                创建一对虚拟网卡，一半宿主机，一般的容器中
        host 模式：
            --net=host
        container 模式：
        none模式：
            不实用网络

    docker run --name=haproxy --net
    docker run           --link  link 多个容器之间通信

    容器互联：docker run           --link  link 多个容器之间通信
        --link
network  启动docker 默认net桥 snat  docker0
    closed container 接口 loopback
        docker run -it --name test --rm --net=none busybox:latest /bin/sh
    bridge container 接口 loopback 以太网接口:桥接至docker daemon设定使用的桥 默认 docker0
        --net bridge
        全局的更改桥：docker help daemon -b --bridge=
        docker run -it --rm --name test busybox:latest /bin/sh
            构建桥
                ovs brctl
        docker run -it --rm --name=mage -h magedu nginx03 /bin/sh
            --dns
            --add-host "HOSTNAME:IP"

        网络映射
            docker0 (实质添加iptables 规则)NAT桥模型上的容器发布给外部网络访问
            -p <port> 把80发布出去（物理机随机生成一个端口，docker中的80相关联；查看物理机生成的随机端口 docker port web容器名 ）
                docker run -it --rm -p 80 --net bridge -name web busybox:latest /bin/bash

                 docker run -it --rm -p 80:80 --net bridge -name web busybox:latest /bin/bash

                -p <hostPort>:<containerPort>
                -p <hostIP>::<containerPort>
                    将主机的<hostIP>de 某随机端口映射为容器的<containerPort>
                -p <hostIP>:<hostPort>:<containerPort>
                    将主机的<hostIP>上的端口<hostPort>映射为容器的<containerPort>
                -P --publish-all 发布所有端口
                    发布所有的端口，用expose

                    dokcer run -it --name web -P --expose 80 --expose 8080 --expose 443 --net bridge  busybos:latest /bin/sh
                        随机映射
            docker inspect web 以json 格式详细信息
                    -f port


                docker port web{容器名}
            docker run -it --rm --name test -h myhost.magedu.com --dns 172.16.0.1 --add-host "docker.com:172.16.100.1" busybox:latest /bin/sh
                nslookup docker.com
                httpd --help busybox 中有
                httpd -f -v -h ｛f前台，v详细，h home目录｝
                iptables -t nat -vnL、

        如果不想启动容器是使用默认的docker0桥接口，需要运行docker daemon 命令时 -b 选项:指明要使用桥
            docker help daemon
            --bip 指定桥ip
            docker

        联盟试容器Join container
            启动一个容器时，让其使用某个已经存在的容器的名称空间；
            docker run --rm --name test --net container:CONTAINER_NAME bushbox:latest /bin/sh
            公用网络名称空间 a改动 b同样生效

    open container
        容器使用Host的网络名称空间:
            --net host
            容器中与物理机一致
        docker run -d -it --rm --name test -h myhost.magedu.com --dns 172.16.0.1 --add-host "docker.com:172.16.100.1" busybox:latest /bin/sh
    将docker
    -d 运行为守护进程
    -v  /host/data/:/container/data
        将网页文件放在物理机的/host/data
容器间的依赖关系
    链接机制:linking
    --link
docker 的监控命令
    ps命令
        -a
    images
        查看当前主机的镜像信息；
docker stats    ｛web｝
        用于容器的状态信息的统计的命令
    docker help run
        资源限制

    docker inspect web
        docker inspect -f {{.NetworkSettings.IPAddress}} web

        .一级.二级
    docker top CONTAINER [ps OPTION]
            port
    docker.io   docker.io/google/cadvisor-canary
        图像界面的容器的细心
        docker pull google/cadvisor-canary

Docker Images:
    docker commit
    Dockerfile:文本文件，镜像文件构建脚本
    dockerfile:由一系列用于根据基础镜像构建新的镜像的文件的专用的指令序列组成；
        指令:选定基础镜像、安装必要的程序、复制必要的配置文件和数据文件、自动运行的服务以及要暴露的端口等；环境变量

    命令:docker build 启动构建过程
    语法:指令行、注释行、空白行
        指令行:由指令参数构成
            指令：其字符不区分大小写；约定俗成，全大些；
        注释行:#开头的行，必须单独用一行当中；
    指令:
        FROM指令：必须是第一个非注释行，用于指定所用到的基础镜像；
        语法格式:
            FROM <image>[:<tag>]或
            FROM <image>@<digest>
            FROM busybox:latest
            FROM centos:6.9
       注意:可以多个FROM 尽量一般用一个
        MAINTANIER指令：
            作者:提供信息
                MAINTANIER <author's detail>
            过程 要续行
        COPY指令：用于从 docker主机复制文件到正在创建的映像文件中；
            语法格式:
                COPY <src> ... <dest>
                COPY ["src",... "<dest>"]
                <src>:要复制的原文件或目录，支持使用通配符；
                <dest>:目标路径，正在创建的镜像文件的文件系统路径；建立使用绝对路径，否则相对于workdir而言；
                所有复制生成的目录文件的UID和GID均为0

                例如：
                    COPY SEVER.XML /etc/tomcat/server.xml
                    COPY *.conf /etc/httpd/conf.d/
                注意：
                    <src>必须building上下文中的路径，因此，不能使用类似..//dome_dir/some_file类的路径
                    <src>如果是目录，递归复制会自动进行；如果多个<src>,包括<src>上使用通配符这种情况，此时dest必须是目录
                    <dest>如果不存在，它会自动被创建，包括其父母录；
        ADD指令：类似于copy指令，

            注意：URL格式指定的源文件，下载后的目标文件的权限为600；
        ENV指令：定义环境变量，此变量可被当前dockerfile文件中的其他指令所调用
            调用格式  $variable_name 或${v_name}

            语法：
                ENV <key> <value> 定义一个
                ENV <key>=<value> 定义多个，有空白字符<value> ,\转义或加引号

                例如：
                    ENV myname="OBAMA CLARK" myDog=HELLO\ Dog /  myCat=Adaf
                ENV定义的环境变量在镜像运行的环境变量会一直存在，因此，可以使用inspect 命令查看，可以docker run 启动 --env 定义
        USER指令：指定运行镜像时
            语法格式：
                USER <UID>|<Username>
                注意：<UID>应使用/etc/passwd中存在的UID,否则docker run 可能会出错
        WORKDIR指令：用于为Dockerfile中的所有的RUN/CMD/ENTRPOINT/COPY/ADD指令的工作目录
                语法格式：
                    WORKDIR <dirpath>

                    注意：WORKDIR可出现多次，也可以使用相对路径，此时表示相对于前一个WORKDIR指定的路径；可以使用ENV定义的变量

                    例如：
                        WORKDIR /var/log
                        WORKDIR $statepath
        VOLUME指令：用于目标镜像文件中创建一个挂载点目录，用于挂载主机上的卷或其他的容器的卷；
            语法格式：
                VOLUME <MOUNTPOINT>
                VOLUME ["<mountpoint>"...]
                    数组[]+""
            注意
                如果mountpoint路径下事先有文件存在，docker run 命令在关在完成后将此前的文件复制到新挂载的卷中
        RUN指令：用于指定docker build 过程中要运行的命令，而不是docker run 此dockerfile构建成的镜像时运行；
            建议多个run运行在用一个run中

            语法格式：
                RUN <command> shell 命令可接受信号
                RUN <"executedable","<parm1>,...">

                RUN <"/bin/bash","-c","executedable","<parm1>,...">

                RUN /usr/bin/yum install iproute nginx && yum clean all
        CMD 指令：类似RUN指令，用于运行程序；但二者不同 CMD在 docker run 时运行，而非docker build；
            CMD 指令的目的为启动容器指定默认的运行程序，运行结束，容器结束；不过CMD指令会被ddocker run cmd 覆盖

            语法格式：
                CMD <COMMAND> 以shell执行
                CMD <"<executeable>","<param1>",...>
                CMD ["parm1","parm2"]
                    第三种ENTRYPOINT

                    注意：如果dockerfile中存在多个CMD指令，最后一个生效
                        CMD ["/usr/sbin/httpd","-c","/etc/httpd/conf/httpd.conf"]
                        -c 指明配置文件
            docker run -it --name sf --rm busybox:latest 不指命令则运行dockerfile中默认的命令
        ENTRYPOINT 指令：类似 CMD
            启动的程序不会被 docker run 覆盖,这些命令行参数会被当作参数送给ENTRYPOINT指令指定的参数，但是如果运行docker run 时使用了 --entrypoint选项，此选项的参数可当作要运行的程序覆盖ENTRYPOINT指令

                语法格式：
                    ENTRYPOINT <command>

                例如：
                    CMD ["-c"]
                    ENTRYPOINT ["top","-b
                    "]
                    top -b -c
        EXPOSE指令：
            用于为容器指定要暴露的端口；
            语法格式：
                EXPOSE <port>[/<protocol>] [<port>[/<protocl>]]...
                    <protocol> 为tcp或udp二者之一默认tcp
                    例如：
                        EXPOSE 11211/tcp 11211/udp
                        在docker run -p 发不出去端口
        ONBUILD指令：定义触发器；表示当前镜像作为基础镜像构建其他镜像时
            当执行docker build 时被出发
            语法格式：
                ONBUILD <INSTRUCTION>
                例如：
                    ONBUILD ADD my.cnf /etc/mysql/my.cnf
                注意：ONBUILD不能自我嵌套，且不会出发FROM和

 vim test.dockerfile
    #Mage
    FROM busybox:latest
    MAINTAINER panyu
    COPY index,html /web/html/index.html
    CMD ["httpd" ,"-f" ,"-h" ,"/web/html"]
    EXPOSE 80/tcp

    docker help build

    docker build -f /root/docker/test.dockerfile -t busybox:web2 /root/docker/
        /root/docker/test.dockerfile dockerfile 文件位置
        /root/docker/工作目录
    docker images

    docker run -d -P --name test1 --rm busybox:web2

    docker port web
docker kill test1
                        空白行:会被忽略
总结
    dockerfile
        run 指令 build中运行
        cmd 指令 run中运行
    docker --help
    使用docker 并获取镜像
        yum install docker docker-registry
        systemctl enable/start docker
        docker search centos/busybox
        docker pull abc/centos  registry/tag
    管理相关命令 docker help ps
        docker images
        docker ps -a
        docker run
        docker commit
        docker build
        docker attach
        docker start
        docker stop
        docker kill
               rm
               rmi
    状态
        docker  stats
                events
                history
                logs
                network
                port
                rename
                volume
                version
                top
                info
                inspect
                ps

产生信息 放在 volume 日志可以导出到elk中
vim httpd.dockerfile
    #my first docker application
    FROM centos:latest
    MANTAINER PANYU
    RUN sed -i -e 's@^mirrorlist.*repolist=os.*$@baseurl=http://172@g' -e '/^mirrorlist.*repo=updates/a enabled=0' -e '/mirrorlist.*repo=extras/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo &&\
    yum -y install httpd php php-mysql php-mbstring &&\
    yum clean all &&\
    echo -e '<?php\n\tphpinfo();\n?>' > /var/www/info.php\
     ADD 提供配置文件

    VOLUME /var/www/html/
    EXPOSE 80/tcp

    CMD ["/usr/sbin/httpd","-f","/etc/httpd/conf/httpd.conf","-DFOREGROUND"]
    CMD

    docker run -p 80:80 --name httpd --rm c centos:latest
    docker inspect httpd   验证VOLUME
    docker run -it --rm --name httpd -p 80:80 -v /web/html:/var/www/html httpd:0.1 /bin/bash